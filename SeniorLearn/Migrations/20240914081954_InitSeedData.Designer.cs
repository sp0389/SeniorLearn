// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SeniorLearn.Data.Core;

#nullable disable

namespace SeniorLearn.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240914081954_InitSeedData")]
    partial class InitSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUserRole<string>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SeniorLearn.Data.Organisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Organisations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "SeniorLearn"
                        });
                });

            modelBuilder.Entity("SeniorLearn.Data.OrganisationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "09adf476-7af7-4bd7-89e5-d173778b3ec9",
                            ConcurrencyStamp = "a81e0050-2a15-4d6f-b2be-7f5c784a94d7",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "1455a748-82ad-4e31-bb41-7c72cfc0fbfa",
                            ConcurrencyStamp = "33b61305-ba7c-4c2a-9b83-f11a516c9cf8",
                            Name = "Standard",
                            NormalizedName = "STANDARD"
                        },
                        new
                        {
                            Id = "de1e5fe5-585b-4867-aae8-57776d64f330",
                            ConcurrencyStamp = "6b3e6141-a0be-444d-9694-d328899faed1",
                            Name = "Professional",
                            NormalizedName = "PROFESSIONAL"
                        },
                        new
                        {
                            Id = "2199dac7-bac1-49f0-8820-07b34f79533b",
                            ConcurrencyStamp = "6921c668-575e-465f-a5c0-a956f86605d6",
                            Name = "Honorary",
                            NormalizedName = "HONORARY"
                        });
                });

            modelBuilder.Entity("SeniorLearn.Data.OrganisationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("OrganisationId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Registered")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OrganisationId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("OrganisationUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SeniorLearn.Data.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("SeniorLearn.Data.OrganisationUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoleType")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasIndex("RoleId");

                    b.HasDiscriminator().HasValue("OrganisationUserRole");

                    b.HasData(
                        new
                        {
                            UserId = "ca32e0e5-46b8-4f44-9a97-0d685a2c54b2",
                            RoleId = "09adf476-7af7-4bd7-89e5-d173778b3ec9",
                            EndDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            RoleType = 0,
                            StartDate = new DateTime(2024, 9, 14, 8, 19, 53, 632, DateTimeKind.Utc).AddTicks(8090)
                        },
                        new
                        {
                            UserId = "c6e5a515-b561-458a-85e6-ab9e7eed58f4",
                            RoleId = "1455a748-82ad-4e31-bb41-7c72cfc0fbfa",
                            EndDate = new DateTime(2025, 9, 14, 8, 19, 53, 632, DateTimeKind.Utc).AddTicks(8093),
                            RoleType = 1,
                            StartDate = new DateTime(2024, 9, 14, 8, 19, 53, 632, DateTimeKind.Utc).AddTicks(8093)
                        },
                        new
                        {
                            UserId = "7610170e-d0e7-43b9-a289-02d13056d54e",
                            RoleId = "de1e5fe5-585b-4867-aae8-57776d64f330",
                            EndDate = new DateTime(2025, 9, 14, 8, 19, 53, 632, DateTimeKind.Utc).AddTicks(8099),
                            RoleType = 2,
                            StartDate = new DateTime(2024, 9, 14, 8, 19, 53, 632, DateTimeKind.Utc).AddTicks(8098)
                        });
                });

            modelBuilder.Entity("SeniorLearn.Data.Member", b =>
                {
                    b.HasBaseType("SeniorLearn.Data.OrganisationUser");

                    b.HasDiscriminator().HasValue("Member");

                    b.HasData(
                        new
                        {
                            Id = "ca32e0e5-46b8-4f44-9a97-0d685a2c54b2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3e098325-ba04-4578-8bd8-231bbf8dde66",
                            Email = "a.admin@seniorlearn.com.au",
                            EmailConfirmed = true,
                            FirstName = "Adam",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedUserName = "A.ADMIN@SENIORLEARN.COM.AU",
                            OrganisationId = 1,
                            PasswordHash = "AQAAAAIAAYagAAAAEHsSevUsbVfCvzTrAPeOAJGAdLJXoClxNuG4OJyPozgYXexeGOqLXgnIxAZgTQTbfA==",
                            PhoneNumberConfirmed = false,
                            Registered = new DateTime(2024, 9, 14, 8, 19, 53, 632, DateTimeKind.Utc).AddTicks(8049),
                            SecurityStamp = "M67EBX32EPBJDLSU75U3EA5SFKIR7MDP",
                            TwoFactorEnabled = false,
                            UserName = "a.admin@seniorlearn.com.au"
                        },
                        new
                        {
                            Id = "c6e5a515-b561-458a-85e6-ab9e7eed58f4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "36bea754-e167-42af-83ed-bd78392859f3",
                            Email = "m.member@seniorlearn.com.au",
                            EmailConfirmed = true,
                            FirstName = "Mary",
                            LastName = "Member",
                            LockoutEnabled = false,
                            NormalizedUserName = "M.MEMBER@SENIORLEARN.COM.AU",
                            OrganisationId = 1,
                            PasswordHash = "AQAAAAIAAYagAAAAEGuoaNhuyNZDd/SdkB7dMyKO61l9hBzj4h26Bm6gmQpnrpwe+vNFNyBLSPj0JGM13Q==",
                            PhoneNumberConfirmed = false,
                            Registered = new DateTime(2024, 9, 14, 8, 19, 53, 632, DateTimeKind.Utc).AddTicks(8060),
                            SecurityStamp = "ISWZYSPA6TIRY35DE4KKKESEPQZKL6VG",
                            TwoFactorEnabled = false,
                            UserName = "m.member@seniorlearn.com.au"
                        },
                        new
                        {
                            Id = "7610170e-d0e7-43b9-a289-02d13056d54e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b2686cbb-099f-4c58-91a4-8fcb9c048d35",
                            Email = "j.bloggs@seniorlearn.com.au",
                            EmailConfirmed = true,
                            FirstName = "Joe",
                            LastName = "Bloggs",
                            LockoutEnabled = false,
                            NormalizedUserName = "J.BLOGGS@SENIORLEARN.COM.AU",
                            OrganisationId = 1,
                            PasswordHash = "AQAAAAIAAYagAAAAENaAF8X3fgawsa7CT8EKV1Bm+PGcrq9PhRBL+ee6Rb8lCZVRf/6it+zEesnSHS6q1w==",
                            PhoneNumberConfirmed = false,
                            Registered = new DateTime(2024, 9, 14, 8, 19, 53, 632, DateTimeKind.Utc).AddTicks(8065),
                            SecurityStamp = "LZOWMFVS2SAJIT7PFI3CPG4WQDCHQS5R",
                            TwoFactorEnabled = false,
                            UserName = "j.bloggs@seniorlearn.com.au"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("SeniorLearn.Data.OrganisationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SeniorLearn.Data.OrganisationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SeniorLearn.Data.OrganisationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SeniorLearn.Data.OrganisationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SeniorLearn.Data.OrganisationUser", b =>
                {
                    b.HasOne("SeniorLearn.Data.Organisation", "Organisation")
                        .WithMany("Users")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Organisation");
                });

            modelBuilder.Entity("SeniorLearn.Data.Payment", b =>
                {
                    b.HasOne("SeniorLearn.Data.OrganisationUser", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SeniorLearn.Data.OrganisationUserRole", b =>
                {
                    b.HasOne("SeniorLearn.Data.OrganisationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SeniorLearn.Data.OrganisationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SeniorLearn.Data.Organisation", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SeniorLearn.Data.OrganisationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SeniorLearn.Data.OrganisationUser", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
